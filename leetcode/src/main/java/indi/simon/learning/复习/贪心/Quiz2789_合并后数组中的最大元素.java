package indi.simon.learning.复习.贪心;

/**
 * 给你一个下标从 0 开始、由正整数组成的数组 nums 。
 *
 * 你可以在数组上执行下述操作 任意 次：
 *
 * 选中一个同时满足 0 <= i < nums.length - 1 和 nums[i] <= nums[i + 1] 的整数 i 。将元素 nums[i + 1] 替换为 nums[i] + nums[i + 1] ，并从数组中删除元素 nums[i] 。
 * 返回你可以从最终数组中获得的 最大 元素的值。
 *
 * 示例 1：
 *
 * 输入：nums = [2,3,7,9,3]
 * 输出：21
 * 解释：我们可以在数组上执行下述操作：
 * - 选中 i = 0 ，得到数组 nums = [5,7,9,3] 。
 * - 选中 i = 1 ，得到数组 nums = [5,16,3] 。
 * - 选中 i = 0 ，得到数组 nums = [21,3] 。
 * 最终数组中的最大元素是 21 。可以证明我们无法获得更大的元素。
 * 示例 2：
 *
 * 输入：nums = [5,3,3]
 * 输出：11
 * 解释：我们可以在数组上执行下述操作：
 * - 选中 i = 1 ，得到数组 nums = [5,6] 。
 * - 选中 i = 0 ，得到数组 nums = [11] 。
 * 最终数组中只有一个元素，即 11 。
 * 提示：
 *
 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 106
 *
 * Created by Chen Zhuo on 2024/4/14.
 */
public class Quiz2789_合并后数组中的最大元素 {

    public static void main(String[] args) {

    }

    //todo: 此题贪心的点在于，数组两个元素的合并有条件，即相邻两个元素必须是前一个小于等于后一个。但是因为操作方式不同会导致结果不同
    // 比如示例中的的[2,3,7,9,3]，如果上来先将3和7合并，则得到的10会比后面的9更大，这样就没法合并9了，导致最终的结果偏小。
    // 注意到如果数组的某个连续子序列是正序的话，那么从后往前合并，能将该序列的所有元素都吃进去，从中间合并就不一定。因此我们可以
    // 贪婪地简单操作：从后往前遍历数组，遇到能合并的（正向正序序列）直接一路合并，这样最终数组中的最大值肯定是题目所求的最大值
    public long maxArrayValue(int[] nums) {
        long sum = nums[nums.length - 1];
        for (int i = nums.length - 2; i >= 0; i--) {
            sum = nums[i] <= sum ? nums[i] + sum : nums[i];
        }
        return sum;
    }

}
