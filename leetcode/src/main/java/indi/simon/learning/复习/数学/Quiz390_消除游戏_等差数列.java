package indi.simon.learning.复习.数学;

/**
 * @author chenzhuo(zhiyue)
 *
 * 列表 arr 由在范围 [1, n] 中的所有整数组成，并按严格递增排序。请你对 arr 应用下述算法：
 *
 * 从左到右，删除第一个数字，然后每隔一个数字删除一个，直到到达列表末尾。
 * 重复上面的步骤，但这次是从右到左。也就是，删除最右侧的数字，然后剩下的数字每隔一个删除一个。
 * 不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。
 * 给你整数 n ，返回 arr 最后剩下的数字。
 *
 * 示例 1：
 *
 * 输入：n = 9
 * 输出：6
 * 解释：
 * arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
 * arr = [2, 4, 6, 8]
 * arr = [2, 6]
 * arr = [6]
 * 示例 2：
 *
 * 输入：n = 1
 * 输出：1
 * 提示：
 *
 * 1 <= n <= 109
 */
//todo: 也是采用的循环来实现，但是考虑了等差数列
public class Quiz390_消除游戏_等差数列 {

    public static void main(String[] args) {
        Quiz390_消除游戏_等差数列 quiz390_消除游戏 = new Quiz390_消除游戏_等差数列();
        int res = quiz390_消除游戏.lastRemaining(6);
        System.out.println(res);
    }

    public int lastRemaining(int n) {
        //代表每一躺消除之后的数列首位，最后剩下的一个肯定就是当时的首位了，因此每次循环只需要更新该a1即可
        int a1 = 1;
        //趟次，偶数为正向，奇数为负向
        int k = 0;
        //等差数列的元素个数，初始肯定是n个
        int cnt = n;
        //等差数列的差值（步长）
        int step = 1;
        while (cnt > 1) {
            if (k % 2 == 0) {
                // 正向一趟，无论如何，正向删一趟之后，数组首位都是a1+step
                a1 = a1 + step;
            } else {
                // 反向一趟，此时要区分数列中元素个数是奇数还是偶数的情形
                a1 = (cnt % 2 == 0) ? a1 : a1 + step;
            }
            //换向
            k++;
            //数列元素减一半（向下取整，因为如果是奇数个从头开始删，隔一个删一个，到最后确实是(cnt-1)/2个）
            cnt = cnt >> 1;
            //等差数列的差值翻一倍
            step = step << 1;
        }
        return a1;
    }

}
